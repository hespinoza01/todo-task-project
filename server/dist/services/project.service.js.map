{"version":3,"sources":["../../src/services/project.service.js"],"names":["createProject","updateProject","getProjectById","getProjectsFromUser","UserId","projectData","resolve","reject","String","ProjectModel","create","newProject","get","plain","console","log","projectId","findByPk","project","update","updatedProject","findAll","raw","where","projects"],"mappings":"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","sourcesContent":["import { ProjectModel } from '@/models'\r\nimport { isObject, ommitKey } from '@/utils'\r\n\r\nexport default {\r\n    createProject,\r\n    updateProject,\r\n    getProjectById,\r\n    getProjectsFromUser,\r\n}\r\n\r\n/**\r\n * Create a new project\r\n * @param {Number} UserId\r\n * @param {Object} projectData\r\n */\r\nfunction createProject(UserId, projectData) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!UserId || !isObject(projectData)) {\r\n                throw String('Invalid input data')\r\n            }\r\n\r\n            const newProject = await ProjectModel.create({\r\n                ...projectData,\r\n                UserId,\r\n            })\r\n\r\n            resolve(newProject.get({ plain: true }))\r\n        } catch (error) {\r\n            console.log(`ProjectService.createProject: ${error}`)\r\n            reject('Error al crear el proyecto')\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Update a exist project by project id\r\n * @param {Number} projectId\r\n * @param {Object} projectData\r\n */\r\nfunction updateProject(projectId, projectData) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!projectId || !isObject(projectData)) {\r\n                throw String('Invalid input data')\r\n            }\r\n\r\n            // get project from db\r\n            const project = await ProjectModel.findByPk(projectId)\r\n\r\n            // if project not exist\r\n            if (!project) {\r\n                reject('No se encontró el proyecto')\r\n                return\r\n            }\r\n\r\n            // extact user id\r\n            const { UserId } = projectData\r\n\r\n            // check if user is owner from current project\r\n            if (UserId !== project.get('UserId')) {\r\n                reject('No tienes permisos para actualizar este projecto')\r\n            }\r\n\r\n            // remove inmutable project data\r\n            projectData = ommitKey(projectData, 'id', 'UserId')\r\n\r\n            const updatedProject = await project.update(projectData)\r\n\r\n            resolve(updatedProject.get({ plain: true }))\r\n        } catch (error) {\r\n            console.log(`ProjectService.updateProject: ${error}`)\r\n            reject('Error al actualizar el proyecto')\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Get project detail by id\r\n * @param {Number} projectId\r\n */\r\nfunction getProjectById(projectId) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!projectId) {\r\n                throw String('Invalid input data')\r\n            }\r\n\r\n            const project = await ProjectModel.findByPk(projectId)\r\n\r\n            // if not exist\r\n            if (!project) {\r\n                reject('No se encontró el proyecto')\r\n                return\r\n            }\r\n\r\n            resolve(project.get({ plain: true }))\r\n        } catch (error) {\r\n            console.log(`ProjectService.getProject: ${error}`)\r\n            reject('Error al obtener detalle del proyecto')\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Get all projects from a user\r\n * @param {Number} UserId\r\n */\r\nfunction getProjectsFromUser(UserId) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!UserId) {\r\n                throw String('Invalid input data')\r\n            }\r\n\r\n            const projects = await ProjectModel.findAll({\r\n                raw: true,\r\n                where: { UserId },\r\n            })\r\n\r\n            resolve(projects)\r\n        } catch (error) {\r\n            console.log(error)\r\n            reject('Error al obtener la lista de proyectos')\r\n        }\r\n    })\r\n}\r\n"],"file":"project.service.js"}