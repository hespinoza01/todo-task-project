{"version":3,"sources":["../../src/services/user.service.js"],"names":["createUser","updateUser","getUser","login","userData","resolve","reject","String","UserModel","findByEmail","email","_user","_password","password","create","newUser","result","get","plain","console","log","userId","id","findByPk","update","updatedUser","user","token"],"mappings":"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","sourcesContent":["import { UserModel } from '@/models'\r\nimport { EncodePassword, CreateToken, isObject, ommitKey } from '@/utils'\r\n\r\nexport default {\r\n    createUser,\r\n    updateUser,\r\n    getUser,\r\n    login,\r\n}\r\n\r\n/**\r\n * Create a new user register\r\n * @param {Object} userData\r\n */\r\nfunction createUser(userData) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!isObject(userData)) {\r\n                throw String('UserService.createUser: Invalid input data')\r\n            }\r\n\r\n            // check if exist user register with current email\r\n            const _user = await UserModel.findByEmail(userData.email)\r\n\r\n            if (_user) {\r\n                reject('El correo ingresado ya está en uso')\r\n                return\r\n            }\r\n\r\n            // create encode password\r\n            const _password = EncodePassword(userData.password)\r\n            // persist user register into db\r\n            const newUser = await UserModel.create({\r\n                ...userData,\r\n                password: _password,\r\n            })\r\n\r\n            // get raw data from prev consult and remove sensible data from user\r\n            const result = ommitKey(newUser.get({ plain: true }), 'password')\r\n\r\n            resolve(result)\r\n        } catch (error) {\r\n            console.log(error)\r\n            reject('Error al crear usuario')\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Update a existent user register\r\n * @param {Number} userId - ID from user\r\n * @param {Object} userData\r\n */\r\nfunction updateUser(userId, userData) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!userId || !isObject(userData)) {\r\n                throw String('UserService.updateUser: Invalid input data')\r\n            }\r\n\r\n            // Remove id key from userData if exist\r\n            delete userData.id\r\n\r\n            // get user register by id\r\n            const _user = await UserModel.findByPk(userId)\r\n\r\n            if (!_user) {\r\n                reject('No se encontró el usuario')\r\n                return\r\n            }\r\n\r\n            // create encode password\r\n            const _password = EncodePassword(userData.password)\r\n            // persist user register into db\r\n            const updatedUser = await _user.update({\r\n                ...userData,\r\n                password: _password,\r\n            })\r\n\r\n            // get raw data from prev consult and remove sensible data from user\r\n            const result = ommitKey(\r\n                updatedUser.get({ plain: true }),\r\n                'password'\r\n            )\r\n\r\n            resolve(result)\r\n        } catch (error) {\r\n            console.log(error)\r\n            reject('Error al actualizar usuario')\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Get user info from id\r\n * @param {Number} userId\r\n */\r\nfunction getUser(userId) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!userId) {\r\n                throw String('UserService.getUser: Invalid input data')\r\n            }\r\n\r\n            const user = await UserModel.findByPk(userId)\r\n\r\n            if (!user) {\r\n                reject('El usuario no existe')\r\n                return\r\n            }\r\n\r\n            resolve(ommitKey(user.get({ plain: true }), 'password'))\r\n        } catch (error) {\r\n            console.log(error)\r\n            reject('Error al obtener los datos del usuario')\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * check user credentials\r\n * @param {String} email\r\n * @param {String} password\r\n */\r\nfunction login(email, password) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!email || !password) {\r\n                throw String('UserService.login: Invalid input data')\r\n            }\r\n\r\n            const user = await UserModel.findByEmail(email)\r\n\r\n            if (!user) {\r\n                throw String('Usuario no existe')\r\n            }\r\n\r\n            delete user.password\r\n            const token = await CreateToken(user)\r\n\r\n            resolve({ ...user, token })\r\n        } catch (error) {\r\n            console.log(error)\r\n            reject('Credenciales incorrectas')\r\n        }\r\n    })\r\n}\r\n"],"file":"user.service.js"}