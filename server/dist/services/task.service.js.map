{"version":3,"sources":["../../src/services/task.service.js"],"names":["createTask","updateTask","getTaskFromProject","ProjectId","taskData","resolve","reject","String","TaskModel","create","TaskStateId","status","newTask","get","plain","console","log","taskId","findByPk","task","update","updatedTask","findAll","raw","nest","where","include","TaskStateModel","tasks"],"mappings":"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","sourcesContent":["import { TaskModel, TaskStateModel } from '@/models'\r\nimport { isObject, ommitKey } from '@/utils'\r\n\r\nexport default {\r\n    createTask,\r\n    updateTask,\r\n    getTaskFromProject,\r\n}\r\n\r\n/**\r\n * Create a new task\r\n * @param {Number} ProjectId\r\n * @param {Object} taskData\r\n */\r\nfunction createTask(ProjectId, taskData) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!ProjectId || !isObject(taskData)) {\r\n                throw String('Invalid input data')\r\n            }\r\n\r\n            const newTask = await TaskModel.create({\r\n                ...taskData,\r\n                TaskStateId: taskData.status,\r\n                ProjectId,\r\n            })\r\n\r\n            resolve(newTask.get({ plain: true }))\r\n        } catch (error) {\r\n            console.log(`TaskService.createTask: ${error}`)\r\n            reject('Error al crear la tarea')\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Update a exist task by id\r\n * @param {Number} taskId\r\n * @param {Object} taskData\r\n */\r\nfunction updateTask(taskId, taskData) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!taskId || !isObject(taskData)) {\r\n                throw String('Invalid input data')\r\n            }\r\n\r\n            // get task from db\r\n            const task = await TaskModel.findByPk(taskId)\r\n\r\n            // if task not exist\r\n            if (!task) {\r\n                reject('No se encontrÃ³ la tarea')\r\n                return\r\n            }\r\n\r\n            // extact user id\r\n            const { ProjectId } = taskData\r\n\r\n            // check if task is associate to register project\r\n            if (parseInt(ProjectId) !== task.get('ProjectId')) {\r\n                reject('No tienes permisos para actualizar este tarea')\r\n            }\r\n\r\n            // remove inmutable project data\r\n            taskData = ommitKey(taskData, 'id', 'ProjectId')\r\n            taskData.TaskStateId = taskData.status\r\n\r\n            const updatedTask = await task.update(taskData)\r\n\r\n            resolve(updatedTask.get({ plain: true }))\r\n        } catch (error) {\r\n            console.log(`TaskService.updateTask: ${error}`)\r\n            reject('Error al actualizar la tarea')\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Get all task from project\r\n * @param {Number} ProjectId\r\n */\r\nfunction getTaskFromProject(ProjectId) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            if (!ProjectId) {\r\n                throw String('Invalid input data')\r\n            }\r\n\r\n            const tasks = await TaskModel.findAll({\r\n                raw: true,\r\n                nest: true,\r\n                where: { ProjectId },\r\n                include: TaskStateModel,\r\n            })\r\n\r\n            resolve(tasks)\r\n        } catch (error) {\r\n            console.log(`TaskService.getTaskFromProject: ${error}`)\r\n            reject('Error al obtener la lista de tareas')\r\n        }\r\n    })\r\n}\r\n"],"file":"task.service.js"}