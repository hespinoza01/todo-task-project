{"version":3,"sources":["../../../src/api/controllers/user.controller.js"],"names":["createUserController","req","res","body","data","UserService","createUser","response","send","error","message","updateUserController","id","user","updateUser","getUserController","getUser","loginUserController","email","password","login"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;SACsBA,oB;;;AAiBtB;AACA;AACA;AACA;AACA;;;;wGArBO,iBAAoCC,GAApC,EAAyCC,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGoB,gCAAeD,GAAG,CAACE,IAAnB,CAHpB;;AAAA;AAGOC,YAAAA,IAHP;AAAA;AAAA,mBAMwBC,sBAAYC,UAAZ,CAAuBF,IAAvB,CANxB;;AAAA;AAMOG,YAAAA,QANP;AAQCL,YAAAA,GAAG,CAACM,IAAJ,CAASD,QAAT;AARD;AAAA;;AAAA;AAAA;AAAA;AAUCL,YAAAA,GAAG,CAACM,IAAJ,CAAS;AACLC,cAAAA,KAAK,EAAE,IADF;AAELC,cAAAA,OAAO;AAFF,aAAT;;AAVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAsBeC,oB;;;AAmBtB;AACA;AACA;AACA;;;;wGAtBO,kBAAoCV,GAApC,EAAyCC,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC;AACQU,YAAAA,EAHT,GAGgBX,GAAG,CAACY,IAHpB,CAGSD,EAHT,EAKC;;AALD;AAAA,mBAMoB,gCAAeX,GAAG,CAACE,IAAnB,CANpB;;AAAA;AAMOC,YAAAA,IANP;AAAA;AAAA,mBAQwBC,sBAAYS,UAAZ,CAAuBF,EAAvB,EAA2BR,IAA3B,CARxB;;AAAA;AAQOG,YAAAA,QARP;AAUCL,YAAAA,GAAG,CAACM,IAAJ,CAASD,QAAT;AAVD;AAAA;;AAAA;AAAA;AAAA;AAYCL,YAAAA,GAAG,CAACM,IAAJ,CAAS;AACLC,cAAAA,KAAK,EAAE,IADF;AAELC,cAAAA,OAAO;AAFF,aAAT;;AAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAuBeK,iB;;;AAiBtB;AACA;AACA;AACA;AACA;;;;qGArBO,kBAAiCd,GAAjC,EAAsCC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC;AACQU,YAAAA,EAHT,GAGgBX,GAAG,CAACY,IAHpB,CAGSD,EAHT,EAKC;;AALD;AAAA,mBAMwBP,sBAAYW,OAAZ,CAAoBJ,EAApB,CANxB;;AAAA;AAMOL,YAAAA,QANP;AAQCL,YAAAA,GAAG,CAACM,IAAJ,CAASD,QAAT;AARD;AAAA;;AAAA;AAAA;AAAA;AAUCL,YAAAA,GAAG,CAACM,IAAJ,CAAS;AACLC,cAAAA,KAAK,EAAE,IADF;AAELC,cAAAA,OAAO;AAFF,aAAT;;AAVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAsBeO,mB;;;;;uGAAf,kBAAmChB,GAAnC,EAAwCC,GAAxC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGmC,qCAAoBD,GAAG,CAACE,IAAxB,CAHnC;;AAAA;AAAA;AAGSe,YAAAA,KAHT,yBAGSA,KAHT;AAGgBC,YAAAA,QAHhB,yBAGgBA,QAHhB;AAAA;AAAA,mBAKwBd,sBAAYe,KAAZ,CAAkBF,KAAlB,EAAyBC,QAAzB,CALxB;;AAAA;AAKOZ,YAAAA,QALP;AAOCL,YAAAA,GAAG,CAACM,IAAJ,CAASD,QAAT;AAPD;AAAA;;AAAA;AAAA;AAAA;AASCL,YAAAA,GAAG,CAACM,IAAJ,CAAS;AACLC,cAAAA,KAAK,EAAE,IADF;AAELC,cAAAA,OAAO;AAFF,aAAT;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { UserService } from '@/services'\r\nimport { UserValidation, LoginUserValidation } from '@/validators'\r\n\r\n/**\r\n * POST: {{SERVER_ADDRESS}}/user\r\n * params: UserValidationSchema\r\n * Create a user acount\r\n */\r\nexport async function createUserController(req, res) {\r\n    try {\r\n        // Extract request and validate data\r\n        const data = await UserValidation(req.body)\r\n\r\n        // invoke create user service\r\n        const response = await UserService.createUser(data)\r\n\r\n        res.send(response)\r\n    } catch (message) {\r\n        res.send({\r\n            error: true,\r\n            message,\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * PUT: {{SERVER_ADDRESS}}/user\r\n * params: UserValidationSchema\r\n * Update a current user account\r\n */\r\nexport async function updateUserController(req, res) {\r\n    try {\r\n        // extract user id\r\n        const { id } = req.user\r\n\r\n        // validate user fields\r\n        const data = await UserValidation(req.body)\r\n\r\n        const response = await UserService.updateUser(id, data)\r\n\r\n        res.send(response)\r\n    } catch (message) {\r\n        res.send({\r\n            error: true,\r\n            message,\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * GET: {{SERVER_ADDRESS}}/user\r\n * Get info from current user\r\n */\r\nexport async function getUserController(req, res) {\r\n    try {\r\n        // Extract user id storage for auth middleware\r\n        const { id } = req.user\r\n\r\n        // invoke user service\r\n        const response = await UserService.getUser(id)\r\n\r\n        res.send(response)\r\n    } catch (message) {\r\n        res.send({\r\n            error: true,\r\n            message,\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * POST: {{SERVER_ADDRESS}}/user/acceso\r\n * params: LoginUserValidationSchema\r\n * Check user credentials to application access\r\n */\r\nexport async function loginUserController(req, res) {\r\n    try {\r\n        // validate login fields\r\n        const { email, password } = await LoginUserValidation(req.body)\r\n\r\n        const response = await UserService.login(email, password)\r\n\r\n        res.send(response)\r\n    } catch (message) {\r\n        res.send({\r\n            error: true,\r\n            message,\r\n        })\r\n    }\r\n}\r\n"],"file":"user.controller.js"}