{"version":3,"sources":["../../../src/api/controllers/task.controller.js"],"names":["createTaskController","req","res","projectId","params","console","log","body","data","TaskService","createTask","response","send","error","message","getTaskFromProjectController","getTaskFromProject","updateTaskController","ProjectId","taskId","updateTask"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;SACsBA,oB;;;AAoBtB;AACA;AACA;AACA;AACA;AACA;;;;wGAzBO,iBAAoCC,GAApC,EAAyCC,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC;AACQC,YAAAA,SAHT,GAGuBF,GAAG,CAACG,MAH3B,CAGSD,SAHT;AAICE,YAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACG,MAAhB,EAJD,CAKC;;AALD;AAAA,mBAMoB,gCAAeH,GAAG,CAACM,IAAnB,CANpB;;AAAA;AAMOC,YAAAA,IANP;AAAA;AAAA,mBAQwBC,sBAAYC,UAAZ,CAAuBP,SAAvB,EAAkCK,IAAlC,CARxB;;AAAA;AAQOG,YAAAA,QARP;AAUCT,YAAAA,GAAG,CAACU,IAAJ,CAASD,QAAT;AAVD;AAAA;;AAAA;AAAA;AAAA;AAYCN,YAAAA,OAAO,CAACC,GAAR;AACAJ,YAAAA,GAAG,CAACU,IAAJ,CAAS;AACLC,cAAAA,KAAK,EAAE,IADF;AAELC,cAAAA,OAAO;AAFF,aAAT;;AAbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA0BeC,4B;;;AAgBtB;AACA;AACA;AACA;AACA;AACA;;;;gHArBO,kBAA4Cd,GAA5C,EAAiDC,GAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC;AACQC,YAAAA,SAHT,GAGuBF,GAAG,CAACG,MAH3B,CAGSD,SAHT;AAAA;AAAA,mBAKwBM,sBAAYO,kBAAZ,CAA+Bb,SAA/B,CALxB;;AAAA;AAKOQ,YAAAA,QALP;AAOCT,YAAAA,GAAG,CAACU,IAAJ,CAASD,QAAT;AAPD;AAAA;;AAAA;AAAA;AAAA;AASCT,YAAAA,GAAG,CAACU,IAAJ,CAAS;AACLC,cAAAA,KAAK,EAAE,IADF;AAELC,cAAAA,OAAO;AAFF,aAAT;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAsBeG,oB;;;;;wGAAf,kBAAoChB,GAApC,EAAyCC,GAAzC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC;AAFD,0BAG0CD,GAAG,CAACG,MAH9C,EAGoBc,SAHpB,eAGSf,SAHT,EAG+BgB,MAH/B,eAG+BA,MAH/B,EAKC;;AALD;AAAA,mBAMoB,gCAAelB,GAAG,CAACM,IAAnB,CANpB;;AAAA;AAMOC,YAAAA,IANP;AAAA;AAAA,mBAQwBC,sBAAYW,UAAZ,CAAuBD,MAAvB,kCAChBX,IADgB;AAEnBU,cAAAA,SAAS,EAATA;AAFmB,eARxB;;AAAA;AAQOP,YAAAA,QARP;AAaCT,YAAAA,GAAG,CAACU,IAAJ,CAASD,QAAT;AAbD;AAAA;;AAAA;AAAA;AAAA;AAeCT,YAAAA,GAAG,CAACU,IAAJ,CAAS;AACLC,cAAAA,KAAK,EAAE,IADF;AAELC,cAAAA,OAAO;AAFF,aAAT;;AAfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { TaskService } from '@/services'\r\nimport { TaskValidation } from '@/validators'\r\n\r\n/**\r\n * POST: {{SERVER_ADDRESS}}/project/:projectId/task\r\n * params: TaskValidationSchema\r\n * Create a new task\r\n * @param {Express.Request} req\r\n * @param {Express.Response} res\r\n */\r\nexport async function createTaskController(req, res) {\r\n    try {\r\n        // extract project id\r\n        const { projectId } = req.params\r\n        console.log(req.params)\r\n        // validate input data\r\n        const data = await TaskValidation(req.body)\r\n\r\n        const response = await TaskService.createTask(projectId, data)\r\n\r\n        res.send(response)\r\n    } catch (message) {\r\n        console.log(message)\r\n        res.send({\r\n            error: true,\r\n            message,\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * GET: {{SERVER_ADDRESS}}/project/:projectId/task\r\n * Get all task from project\r\n * @param {Express.Request} req\r\n * @param {Express.Response} res\r\n */\r\nexport async function getTaskFromProjectController(req, res) {\r\n    try {\r\n        // extract project id\r\n        const { projectId } = req.params\r\n\r\n        const response = await TaskService.getTaskFromProject(projectId)\r\n\r\n        res.send(response)\r\n    } catch (message) {\r\n        res.send({\r\n            error: true,\r\n            message,\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * PUT: {{SERVER_ADDRESS}}/project/:project/task/:taskId\r\n * update a current task\r\n * @param {Express.Request} req\r\n * @param {Express.Response} res\r\n */\r\nexport async function updateTaskController(req, res) {\r\n    try {\r\n        // extract project and task id\r\n        const { projectId: ProjectId, taskId } = req.params\r\n\r\n        // validate input data\r\n        const data = await TaskValidation(req.body)\r\n\r\n        const response = await TaskService.updateTask(taskId, {\r\n            ...data,\r\n            ProjectId,\r\n        })\r\n\r\n        res.send(response)\r\n    } catch (message) {\r\n        res.send({\r\n            error: true,\r\n            message,\r\n        })\r\n    }\r\n}\r\n"],"file":"task.controller.js"}