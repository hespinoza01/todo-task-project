{"version":3,"sources":["../../src/validators/user.validation.js"],"names":["LoginUserValidation","body","resolve","reject","schema","Joi","object","email","string","exist","messages","password","validate","error","value","UserValidator","id","number","positive","trim","max","fullname","min"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACO,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AACtC,SAAO,wBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAMC,MAAM,GAAGC,gBAAIC,MAAJ,CAAW;AACtBC,MAAAA,KAAK,EAAEF,gBAAIG,MAAJ,GAAaC,KAAb,GAAqBC,QAArB,CAA8B;AACjC,wBAAgB;AADiB,OAA9B,CADe;AAKtBC,MAAAA,QAAQ,EAAEN,gBAAIG,MAAJ,GAAaC,KAAb,GAAqBC,QAArB,CAA8B;AACpC,wBAAgB;AADoB,OAA9B;AALY,KAAX,CAAf;;AADoC,2BAWXN,MAAM,CAACQ,QAAP,CAAgBX,IAAhB,CAXW;AAAA,QAW5BY,KAX4B,oBAW5BA,KAX4B;AAAA,QAWrBC,KAXqB,oBAWrBA,KAXqB;;AAapC,QAAID,KAAJ,EAAW;AACPV,MAAAA,MAAM,CAAC,mCAAuBU,KAAvB,CAAD,CAAN;AACH;;AAEDX,IAAAA,OAAO,CAACY,KAAD,CAAP;AACH,GAlBM,CAAP;AAmBH;AAED;AACA;AACA;AACA;;;AACe,SAASC,aAAT,CAAuBd,IAAvB,EAA6B;AACxC,SAAO,wBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,QAAMC,MAAM,GAAGC,gBAAIC,MAAJ,CAAW;AACtBU,MAAAA,EAAE,EAAEX,gBAAIY,MAAJ,GAAaC,QAAb,GAAwBR,QAAxB,CAAiC;AACjC,uBAAe,iCADkB;AAEjC,2BACI;AAH6B,OAAjC,CADkB;AAOtBH,MAAAA,KAAK,EAAEF,gBAAIG,MAAJ,GAAaW,IAAb,GAAoBC,GAApB,CAAwB,GAAxB,EAA6Bb,KAA7B,GAAqCE,KAArC,GAA6CC,QAA7C,CAAsD;AACzD,sBACI,mEAFqD;AAGzD,wBAAgB,0BAHyC;AAIzD,wBAAgB;AAJyC,OAAtD,CAPe;AActBW,MAAAA,QAAQ,EAAEhB,gBAAIG,MAAJ,GAAaW,IAAb,GAAoBG,GAApB,CAAwB,CAAxB,EAA2BF,GAA3B,CAA+B,GAA/B,EAAoCX,KAApC,GAA4CC,QAA5C,CAAqD;AAC3D,sBAAc,6CAD6C;AAE3D,sBACI,wDAHuD;AAI3D,wBAAgB;AAJ2C,OAArD,CAdY;AAqBtBC,MAAAA,QAAQ,EAAEN,gBAAIG,MAAJ,GAAac,GAAb,CAAiB,CAAjB,EAAoBb,KAApB,GAA4BC,QAA5B,CAAqC;AAC3C,sBACI,sDAFuC;AAG3C,wBAAgB;AAH2B,OAArC;AArBY,KAAX,CAAf,CAFoC,CA8BpC;;;AA9BoC,4BA+BXN,MAAM,CAACQ,QAAP,CAAgBX,IAAhB,CA/BW;AAAA,QA+B5BY,KA/B4B,qBA+B5BA,KA/B4B;AAAA,QA+BrBC,KA/BqB,qBA+BrBA,KA/BqB;;AAiCpC,QAAID,KAAJ,EAAW;AACPV,MAAAA,MAAM,CAAC,mCAAuBU,KAAvB,CAAD,CAAN;AACH;;AAEDX,IAAAA,OAAO,CAACY,KAAD,CAAP;AACH,GAtCM,CAAP;AAuCH","sourcesContent":["import Joi from '@hapi/joi'\r\nimport { ValidationErrorMessage } from '@/utils'\r\n\r\n/**\r\n * Validation for login fields\r\n * @param {Object} body\r\n */\r\nexport function LoginUserValidation(body) {\r\n    return new Promise((resolve, reject) => {\r\n        const schema = Joi.object({\r\n            email: Joi.string().exist().messages({\r\n                'any.required': 'El correo es requerido',\r\n            }),\r\n\r\n            password: Joi.string().exist().messages({\r\n                'any.required': 'La contraseña es requerida',\r\n            }),\r\n        })\r\n\r\n        const { error, value } = schema.validate(body)\r\n\r\n        if (error) {\r\n            reject(ValidationErrorMessage(error))\r\n        }\r\n\r\n        resolve(value)\r\n    })\r\n}\r\n\r\n/**\r\n * User validator data for create/update actions\r\n * @param {Object} body\r\n */\r\nexport default function UserValidator(body) {\r\n    return new Promise((resolve, reject) => {\r\n        // validations for user schema\r\n        const schema = Joi.object({\r\n            id: Joi.number().positive().messages({\r\n                'number.base': 'Ingrese un ID de usuario válido',\r\n                'number.positive':\r\n                    'El ID de usuario no puede ser un número negativo',\r\n            }),\r\n\r\n            email: Joi.string().trim().max(100).email().exist().messages({\r\n                'string.max':\r\n                    'El correo ingresado supera el límite de 100 caracteres permitidos',\r\n                'string.email': 'Ingrese un correo válido',\r\n                'any.required': 'El correo es requerido',\r\n            }),\r\n\r\n            fullname: Joi.string().trim().min(4).max(255).exist().messages({\r\n                'string.min': 'Ingrese un nombre con al menos 4 caracteres',\r\n                'string.max':\r\n                    'El nombre ingresado supera el límite de 255 caracteres',\r\n                'any.required': 'El nombre del usuario es requerido',\r\n            }),\r\n\r\n            password: Joi.string().min(6).exist().messages({\r\n                'string.min':\r\n                    'La contraseña debe ser igual o mayor de 6 caracteres',\r\n                'any.required': 'La contraseña es requerida',\r\n            }),\r\n        })\r\n\r\n        // check schema validation\r\n        const { error, value } = schema.validate(body)\r\n\r\n        if (error) {\r\n            reject(ValidationErrorMessage(error))\r\n        }\r\n\r\n        resolve(value)\r\n    })\r\n}\r\n"],"file":"user.validation.js"}