{"version":3,"sources":["../src/app.js"],"names":["startServer","app","loaders","init","expressApp","expressRoutes","api","sequelizeInstance","db","listen","vars","PORT","err","console","log"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;SAEeA,W;;;;;+FAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,GADV,GACgB,0BADhB;AAAA;AAAA,mBAGUC,oBAAQC,IAAR,CAAa;AACfC,cAAAA,UAAU,EAAEH,GADG;AAEfI,cAAAA,aAAa,EAAEC,eAFA;AAGfC,cAAAA,iBAAiB,EAAEC;AAHJ,aAAb,CAHV;;AAAA;AASIP,YAAAA,GAAG,CAACQ,MAAJ,CAAWC,aAAKC,IAAhB,EAAsB,UAAAC,GAAG,EAAI;AACzB,kBAAIA,GAAJ,EAAS;AACLC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACH;;AAEDC,cAAAA,OAAO,CAACC,GAAR,mCAAuCJ,aAAKC,IAA5C;AACH,aAPD;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmBAX,WAAW","sourcesContent":["import express from 'express'\r\nimport api from '@/api'\r\nimport loaders from '@/loaders'\r\nimport { vars, db } from '@/config'\r\n\r\nasync function startServer() {\r\n    const app = express()\r\n\r\n    await loaders.init({\r\n        expressApp: app,\r\n        expressRoutes: api,\r\n        sequelizeInstance: db,\r\n    })\r\n\r\n    app.listen(vars.PORT, err => {\r\n        if (err) {\r\n            console.log(err)\r\n            return\r\n        }\r\n\r\n        console.log(`Server running at port: ${vars.PORT}`)\r\n    })\r\n}\r\n\r\nstartServer()\r\n"],"file":"app.js"}